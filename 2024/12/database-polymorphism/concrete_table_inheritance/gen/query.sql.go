// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package gen

import (
	"context"
	"database/sql"
)

const createBugTicket = `-- name: CreateBugTicket :execresult
INSERT INTO bug_tickets (
    title,
    description,
    bug_report
) VALUES (
    ?, 
    ?, 
    ?
)
`

type CreateBugTicketParams struct {
	Title       string
	Description string
	BugReport   string
}

// Mutation queries
func (q *Queries) CreateBugTicket(ctx context.Context, arg CreateBugTicketParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createBugTicket, arg.Title, arg.Description, arg.BugReport)
}

const createFeatureRequestTicket = `-- name: CreateFeatureRequestTicket :execresult
INSERT INTO feature_tickets (
    title,
    description,
    feature_request
) VALUES (
    ?, 
    ?, 
    ?
)
`

type CreateFeatureRequestTicketParams struct {
	Title          string
	Description    string
	FeatureRequest string
}

func (q *Queries) CreateFeatureRequestTicket(ctx context.Context, arg CreateFeatureRequestTicketParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createFeatureRequestTicket, arg.Title, arg.Description, arg.FeatureRequest)
}

const deleteBugTicket = `-- name: DeleteBugTicket :exec
DELETE FROM bug_tickets
WHERE id = ?
`

func (q *Queries) DeleteBugTicket(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBugTicket, id)
	return err
}

const deleteFeatureRequestTicket = `-- name: DeleteFeatureRequestTicket :exec
DELETE FROM feature_tickets
WHERE id = ?
`

func (q *Queries) DeleteFeatureRequestTicket(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFeatureRequestTicket, id)
	return err
}

const getBugTicket = `-- name: GetBugTicket :one
SELECT id, title, description, bug_report 
FROM bug_tickets
WHERE id = ?
LIMIT 1
`

// Queries for single ticket
func (q *Queries) GetBugTicket(ctx context.Context, id int64) (BugTicket, error) {
	row := q.db.QueryRowContext(ctx, getBugTicket, id)
	var i BugTicket
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.BugReport,
	)
	return i, err
}

const getFeatureRequestTicket = `-- name: GetFeatureRequestTicket :one
SELECT id, title, description, feature_request
FROM feature_tickets
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetFeatureRequestTicket(ctx context.Context, id int64) (FeatureTicket, error) {
	row := q.db.QueryRowContext(ctx, getFeatureRequestTicket, id)
	var i FeatureTicket
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.FeatureRequest,
	)
	return i, err
}

const listBugTickets = `-- name: ListBugTickets :many
SELECT id, title, description, bug_report 
FROM bug_tickets 
ORDER BY id
`

// Queries for listing tickets
func (q *Queries) ListBugTickets(ctx context.Context) ([]BugTicket, error) {
	rows, err := q.db.QueryContext(ctx, listBugTickets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BugTicket
	for rows.Next() {
		var i BugTicket
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.BugReport,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFeatureRequestTickets = `-- name: ListFeatureRequestTickets :many
SELECT id, title, description, feature_request 
FROM feature_tickets 
ORDER BY id
`

func (q *Queries) ListFeatureRequestTickets(ctx context.Context) ([]FeatureTicket, error) {
	rows, err := q.db.QueryContext(ctx, listFeatureRequestTickets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeatureTicket
	for rows.Next() {
		var i FeatureTicket
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.FeatureRequest,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
